use('class');
db.sales.insertMany([
{
  _id: 1,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("2"),
  date: ISODate("2014-03-01T08:00:00Z")
},
{
  _id: 2,
  item: "O Homem e Seus Símbolos",
  price: NumberDecimal("20"),
  quantity: NumberInt("1"),
  date: ISODate("2014-03-01T09:00:00Z")
},
{
  _id: 3,
  item: "Comunicação Não-Violenta",
  price: NumberDecimal("5"),
  quantity: NumberInt( "10"),
  date: ISODate("2014-03-15T09:00:00Z")
},
{
  _id: 4,
  item: "Comunicação Não-Violenta",
  price: NumberDecimal("5"),
  quantity:  NumberInt("20"),
  date: ISODate("2014-04-04T11:21:39.736Z")
},
{
  _id: 5,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("10"),
  date: ISODate("2014-04-04T21:23:13.331Z")
},
{
  _id: 6,
  item:"A Coragem de Ser Imperfeito",
  price: NumberDecimal("7.5"),
  quantity: NumberInt("5" ),
  date: ISODate("2015-06-04T05:08:13Z")
},
{
  _id: 7,
  item: "A Coragem de Ser Imperfeito",
  price: NumberDecimal("7.5"),
  quantity: NumberInt("10"),
  date: ISODate("2015-09-10T08:43:00Z")
},
{
  _id: 8,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("5" ),
  date: ISODate("2016-02-06T20:20:13Z")
}
]);

// Exemplo 1: Contando o número de documentos
use('class');
db.sales.aggregate([
  {
    $group: {
      _id: null,
      count: { $sum: 1 }
    }
  }
]);

// Exemplo 2: Retornando valores distintos
use('class');
db.sales.aggregate([
  {
    $group : {
      _id : "$item",
      count: { $sum: 1}
    }
  }
]);

// Exemplo 3: Somando valores
use('class');
db.sales.aggregate([
  {
    $group : {
      _id : "$item",
      totalSaleAmount: {
        $sum: {
          $multiply: ["$price", "$quantity"]
        }
      }
    }
  }
]);

// Exemplo 4: Having (do Mysql), combinando estágios no aggregate
use('class');
db.sales.aggregate([
  // Primeiro Estágio
  {
    $group : {
      _id : "$item",
      totalSaleAmount: {
        $sum: {
          $multiply: ["$price", "$quantity"]
        }
      }
    }
  },
  // Segundo Estágio
  {
    $match: { "totalSaleAmount": { $gte: 100 } }
  }
]);

// Exemplo 5: Agrupando por null
use('class');
db.sales.aggregate([
  {
    $group : {
      _id : null,
      totalSaleAmount: {
        $sum: { $multiply: ["$price", "$quantity"] }
      },
      averageQuantity: { $avg: "$quantity" },
      count: { $sum: 1 }
    }
  }
]);


// Utilizando o banco de dados agg_example e a coleção transactions , faça os exercícios:
use('agg_example');
db.transactions.find();

// 1- Selecione todos os bancos, ou seja, valores do campo bank ;
use('agg_example');
db.transactions.aggregate([
  {
    $group: {
      _id: "$bank",
      bank: {$sum: 1}
    }
  }
]);

// 2- Selecione o valor total das transações em cada banco e quantas são;
use('agg_example');
db.transactions.aggregate([
  {
    $group: {
      _id: "$bank",
      totalValue: {$sum: "$value"},
      transacoes: {$sum: 1},
    }
  }
]);

// 3- Selecione o valor total de transações por banco;
use('agg_example');
db.transactions.aggregate([
  {
    $group: {
      _id: "$bank",
      totalValue: {$sum: "$value"}
    }
  }
]);

// 4- Selecione os bancos que têm o valor total de transações maior que 1000.
use('agg_example');
db.transactions.aggregate([
  {
    $group: {
      _id: "$bank",
      totalValue: {$sum: "$value"}
    }    
  },
  {
    $match: {
      "totalValue": {$gte: 1000}
    }
  }
]);
