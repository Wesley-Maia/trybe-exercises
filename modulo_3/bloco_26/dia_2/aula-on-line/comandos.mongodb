db.orders.insertMany(
  [
    { "_id" : 1, "item" : "almonds", "price" : 12, "ordered" : 2 },
    { "_id" : 2, "item" : "pecans", "price" : 20, "ordered" : 1 },
    { "_id" : 3, "item" : "cookies", "price" : 10, "ordered" : 60 }
  ]
);

db.warehouses.insertMany(
  [
    { "_id" : 1, "stock_item" : "almonds", warehouse: "A", "instock" : 120 },
    { "_id" : 2, "stock_item" : "pecans", warehouse: "A", "instock" : 80 },
    { "_id" : 3, "stock_item" : "almonds", warehouse: "B", "instock" : 60 },
    { "_id" : 4, "stock_item" : "cookies", warehouse: "B", "instock" : 40 },
    { "_id" : 5, "stock_item" : "cookies", warehouse: "A", "instock" : 80 }
]);

db.orders.find();

// comparando itens nas collections com lookup
// const order_item = "LED RGB"
// const order_qty = 2

// warehouses 
// "LED RGB" === true 
// 100 >= 2 

db.orders.aggregate([
  {
    $lookup: {
      from: "warehouses",
      let: { order_item: "$item", order_qty: "$ordered" },
      pipeline: [
        { $match:
            { $expr:
              { $and: [
                  { $eq: [ "$stock_item", "$$order_item" ] },
                  { $gte: [ "$instock", "$$order_qty" ] }
                ]
              }
            }
        },
        { $project: { stock_item: 0, _id: 0 } },
      ],
      as: "stockdata"
    }
  },
]);

// trabalhando com $add

db.packages.insertMany(
  [
      {
          "_id": 1,
          "package": "California Beach",
          "prices": {
              "package_price": NumberDecimal(10000),
              "package_fee": 200,
              "flight_price": 790
          },
          "dates": {
              "start_date": ISODate("2014-03-15T09:00:00Z"),
              "end_date": ISODate("2014-10-15T09:00:00Z")
          }
      },
      {
          "_id": 2,
          "package": "New York",
          "prices": {
              "package_price": NumberDecimal(13000),
              "package_fee": 150,
              "flight_price": 990
          },
          "dates": {
              "start_date": ISODate("2014-03-15T09:00:00Z"),
              "end_date": ISODate("2014-10-15T09:00:00Z")
          }
      },
      {
          "_id": 3,
          "package": "Bahamas",
          "prices": {
              "package_price": NumberDecimal(22000),
              "package_fee": 350,
              "flight_price": 1300
          },
          "dates": {
              "start_date": ISODate("2014-03-15T09:00:00Z"),
              "end_date": ISODate("2014-10-15T09:00:00Z")
          }
      },
      {
          "_id": 4,
          "package": "Guarapari",
          "prices": {
              "package_price": NumberDecimal(2000),
              "package_fee": 50,
              "flight_price": 300
          },
          "dates": {
              "start_date": ISODate("2014-03-15T09:00:00Z"),
              "end_date": ISODate("2014-10-15T09:00:00Z")
          }
      },
      {
          "_id": 5,
          "package": "Caldas Novas",
          "prices": {
              "package_price": NumberDecimal(1500),
              "package_fee": 70,
              "flight_price": 250
          },
          "dates": {
              "start_date": ISODate("2014-03-15T09:00:00Z"),
              "end_date": ISODate("2014-10-15T09:00:00Z")
          }
      }
  ]
);

db.packages.aggregate([
  {
    $project: {
      package: 1,
      total: {
        $add: [
          "$prices.package_price", 
          "$prices.package_fee", 
          "$prices.flight_price"
        ]
      }
    }
  }
]);



db.packages.aggregate([
  {
    $project: {
      package: 1,
        checkin_date: {
          $add: ["$dates.start_date", 60 * 24 * 60 * 60 * 1000]
        },
        checkout_date : {
          $add: ["$dates.end_date", 60 * 24 * 60 * 60 * 1000]
      }
    }
  }
]);

db.packages.aggregate([
    {
        $addFields: {
            milissegundos: 60 * 24 * 60 * 60 * 1000
        }
    },
    {
        $project: {
            package: 1,
            checkin_date: {
                $add: ["$dates.start_date", "$milissegundos"]
            },
            checkout_date: {
                $add: ["$dates.end_date", "$milissegundos"]
            }
        }
    }
]);

const milissegundos = 60 * 24 * 60 * 60 * 1000;
 
db.packages.aggregate([
  {
    $project: {
      package: 1,
      checkin_date: {
        $add: ["$dates.start_date", milissegundos]
      },
      checkout_date: {
        $add: ["$dates.end_date", milissegundos]
      }
    }
  }
]);

const milissegundos = 60 * 24 * 60 * 60 * 1000;
 
db.packages.aggregate([
  {
    $addFields: {
      subtracted_start_date: {
        $subtract: ["$dates.start_date", milissegundos]
      },
      subtracted_end_date: {
        $subtract: ["$dates.end_date", milissegundos]
      }
    }
  },
  {
      $project: {
        pacote: 1,
        "dates.start_date": 1,
        subtracted_start_date: 1,
        "dates.end_date": 1,
        subtracted_end_date: 1
      }
  }
]);


db.packages.find();

// Primeiro vamos adicionar esses campos ao pipeline:
db.packages.aggregate([
  {
    $addFields: {
      totalPacote: {
        $add: [ 
          "$prices.package_price", 
          "$prices.package_fee", 
          "$prices.flight_price"
        ]
      },
      totalDolar: {
        $multiply: ["$totalPacote", 5.50]
      }
    }
  },
]);


db.packages.aggregate([
  {
    $addFields: {
      totalPacote: {
        $add: [ 
          "$prices.package_price", 
          "$prices.package_fee", 
          "$prices.flight_price"
          ]
      }
  }
  },
  {
    $addFields: {
      totalReais: {
        $multiply: ["$totalPacote", 5.52]
      }
    }
  },
  {
    $project: {
      package: 1,
      totalDolarOriginal: "$totalReais",
      totalDolarParaCima: {
        $ceil: ["$totalReais"]
      },
      totalDolarParaBaixo: {
        $floor: ["$totalReais"]
      }
    }
  }
]);


db.packages.aggregate([
  {
    $addFields: {
      totalPacote: {
        $add: [
          "$prices.package_price", 
          "$prices.package_fee", 
          "$prices.flight_price"
        ]
      }
    }
  },
  {
    $addFields: {
      totalDolar: {
        $multiply: ["$totalPacote", 5.32]
      }
    }
  },
  {
    $project: {
      package: 1,
      totalPacote: 1,
      totalDolar: 1,
      percentualTaxa: {
        $divide: ["$totalDolar", "$totalPacote"]
        // o primeiro argumento é o dividendo e o segundo é o divisor
      }
    }
  }
]);