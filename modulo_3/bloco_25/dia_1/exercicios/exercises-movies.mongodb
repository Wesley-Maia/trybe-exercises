use('class')
db.movies.insertMany(
  [
    {
      "title": "Batman",
      "category": [ "action", "adventure" ],
      "imdbRating": 7.6,
      "budget": 35
    },
    {
      "title": "Godzilla",
      "category": [ "action", "adventure", "sci-fi" ],
      "imdbRating": 6.6
    },
    {
      "title": "Home Alone",
      "category": [ "family", "comedy" ],
      "imdbRating": 7.4
    }
  ]
);

use('class');
db.movies.count();

// Exercício 1 : Altere o imdbRating para 7.7 no filme Batman .
use('class');
db.movies.updateOne(
  {title: "Batman"},
  {$set: {imdbRating: 7.7}}
);

use('class');
db.movies.find({title: "Batman"});

// Exercício 2 : Altere budget para 1 no filme Godzilla .
use('class');
db.movies.updateOne(
  {title: "Godzilla"},
  {$set: {budget: 1}}
);

use('class');
db.movies.find({title: "Godzilla"});

// Exercício 3 : Altere budget para 15 e imdbRating para 5.5 no filme Home Alone .
use('class');
db.movies.updateMany(
  {title: "Home Alone"},
  {$set: {budget: 15, imdbRating: 5.5}}
);

use('class');
db.movies.find({title: "Home Alone"});

// Exercício 4 : Aumente em 2 o imdbRating do filme Batman .
use('class');
db.movies.updateOne(
  {title: "Batman"},
  {$inc: {imdbRating: 2}}
);

use('class')
db.movies.find({title: "Batman"});

// Exercício 5 : Aumente em 5 o budget do filme Home Alone .
use('class');
db.movies.updateOne(
  {title: "Home Alone"},
  {$inc: {budget: 5}}
);

use('class')
db.movies.find({title: "Home Alone"});

// Exercício 6 : Multiplique por 4 o imdbRating do filme Batman .
use('class');
db.movies.updateOne(
  {title: "Batman"},
  {$mul: {imdbRating: NumberInt(4)}}
);

use('class')
db.movies.find({title: "Batman"});

// Exercício 7 : Renomeie o campo budget para estimatedBudget do filme Batman .
use('class');
db.movies.updateOne(
  {title: "Batman"},
  {$rename: {"budget": "estimateBudget"}}
);

use('class')
db.movies.find({title: "Batman"});

// Exercício 8 : Utilize o operador $min para alterar o budget para 5 do filme Home Alone .
use('class');
db.movies.updateOne(
  {title: "Home Alone"},
  {$min: {budget: 5}}
);

use('class')
db.movies.find({title: "Home Alone"});

// Exercício 9 : Utilize o operador $max para alterar o imdbRating para 8.6 do filme Godzilla . Além disso, altere a categoria "adventure" para "thriller" do filme Godzilla .
use('class');
db.movies.updateOne(
  {title: "Godzilla"},
  {$max: {imdbRating: 8.6}, $set: {"category.1": "thriller"}}
);

use('class');
db.movies.find({title: "Godzilla"});

// Exercício 10 : Utilizando o operador $currentDate , crie um campo chamado lastUpdated com o tipo timestamp no filme Home Alone .
use('class');
db.movies.updateOne(
  { title: "Home Alone" },
  {
    $currentDate: {
      lastUpdated: { $type: "timestamp" },
    },
  },
);

use('class');
db.movies.find({title: "Home Alone"});

// Exercício 11 : Utilizando uma única operação, crie um campo chamado sequels e atribua a ele o valor 0 em todos os documentos.
use('class');
db.movies.updateMany(
  {},
  { $set: { sequels: 0 } },
);

use('class');
db.movies.find();

// Exercício 12 : Utilizando uma única operação, remova os campos budget e estimatedBudget em todos os documentos.
use('class');
db.movies.updateMany(
  {},
  {
    $unset: {
      budget: "",
      estimateBudget: "",
    },
  },
);

use('class');
db.movies.find();

// Exercício 13 : Para os filmes Batman ou Home Alone , atribua a imdbRating o valor 17 , caso o valor de imdbRating seja menor que 17 .
use('class');
db.movies.updateMany(
  {
    $or: [
      { title: "Batman" },
      { title: "Home Alone" },
    ],
  },
  {
    $max: {
      imdbRating: 17,
    },
  },
);

use('class');
db.movies.find();
